#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Curso_Csharp_CRUD_LINQ_Y_SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestionPedidos")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void Insertempresa(empresa instance);
    partial void Updateempresa(empresa instance);
    partial void Deleteempresa(empresa instance);
    partial void Insertempleado(empleado instance);
    partial void Updateempleado(empleado instance);
    partial void Deleteempleado(empleado instance);
    partial void Insertcargo(cargo instance);
    partial void Updatecargo(cargo instance);
    partial void Deletecargo(cargo instance);
    partial void InsertcargoEmpleado(cargoEmpleado instance);
    partial void UpdatecargoEmpleado(cargoEmpleado instance);
    partial void DeletecargoEmpleado(cargoEmpleado instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Curso_Csharp_CRUD_LINQ_Y_SQL.Properties.Settings.Default.GestionPedidosConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<empresa> empresa
		{
			get
			{
				return this.GetTable<empresa>();
			}
		}
		
		public System.Data.Linq.Table<empleado> empleado
		{
			get
			{
				return this.GetTable<empleado>();
			}
		}
		
		public System.Data.Linq.Table<cargo> cargo
		{
			get
			{
				return this.GetTable<cargo>();
			}
		}
		
		public System.Data.Linq.Table<cargoEmpleado> cargoEmpleado
		{
			get
			{
				return this.GetTable<cargoEmpleado>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.empresa")]
	public partial class empresa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private EntitySet<empleado> _empleado;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public empresa()
		{
			this._empleado = new EntitySet<empleado>(new Action<empleado>(this.attach_empleado), new Action<empleado>(this.detach_empleado));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="NVarChar(50)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empresa_empleado", Storage="_empleado", ThisKey="Id", OtherKey="EmpresaId")]
		public EntitySet<empleado> empleado
		{
			get
			{
				return this._empleado;
			}
			set
			{
				this._empleado.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_empleado(empleado entity)
		{
			this.SendPropertyChanging();
			entity.empresa = this;
		}
		
		private void detach_empleado(empleado entity)
		{
			this.SendPropertyChanging();
			entity.empresa = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.empleado")]
	public partial class empleado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private string _Apellido_;
		
		private int _EmpresaId;
		
		private EntitySet<cargoEmpleado> _cargoEmpleado;
		
		private EntityRef<empresa> _empresa;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellido_Changing(string value);
    partial void OnApellido_Changed();
    partial void OnEmpresaIdChanging(int value);
    partial void OnEmpresaIdChanged();
    #endregion
		
		public empleado()
		{
			this._cargoEmpleado = new EntitySet<cargoEmpleado>(new Action<cargoEmpleado>(this.attach_cargoEmpleado), new Action<cargoEmpleado>(this.detach_cargoEmpleado));
			this._empresa = default(EntityRef<empresa>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="NVarChar(50)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Apellido ]", Storage="_Apellido_", DbType="NVarChar(50)")]
		public string Apellido_
		{
			get
			{
				return this._Apellido_;
			}
			set
			{
				if ((this._Apellido_ != value))
				{
					this.OnApellido_Changing(value);
					this.SendPropertyChanging();
					this._Apellido_ = value;
					this.SendPropertyChanged("Apellido_");
					this.OnApellido_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpresaId", DbType="Int NOT NULL")]
		public int EmpresaId
		{
			get
			{
				return this._EmpresaId;
			}
			set
			{
				if ((this._EmpresaId != value))
				{
					if (this._empresa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpresaIdChanging(value);
					this.SendPropertyChanging();
					this._EmpresaId = value;
					this.SendPropertyChanged("EmpresaId");
					this.OnEmpresaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empleado_cargoEmpleado", Storage="_cargoEmpleado", ThisKey="Id", OtherKey="EmpleadoId")]
		public EntitySet<cargoEmpleado> cargoEmpleado
		{
			get
			{
				return this._cargoEmpleado;
			}
			set
			{
				this._cargoEmpleado.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empresa_empleado", Storage="_empresa", ThisKey="EmpresaId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public empresa empresa
		{
			get
			{
				return this._empresa.Entity;
			}
			set
			{
				empresa previousValue = this._empresa.Entity;
				if (((previousValue != value) 
							|| (this._empresa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._empresa.Entity = null;
						previousValue.empleado.Remove(this);
					}
					this._empresa.Entity = value;
					if ((value != null))
					{
						value.empleado.Add(this);
						this._EmpresaId = value.Id;
					}
					else
					{
						this._EmpresaId = default(int);
					}
					this.SendPropertyChanged("empresa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cargoEmpleado(cargoEmpleado entity)
		{
			this.SendPropertyChanging();
			entity.empleado = this;
		}
		
		private void detach_cargoEmpleado(cargoEmpleado entity)
		{
			this.SendPropertyChanging();
			entity.empleado = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cargo")]
	public partial class cargo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NombreCargo_;
		
		private EntitySet<cargoEmpleado> _cargoEmpleado;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreCargo_Changing(string value);
    partial void OnNombreCargo_Changed();
    #endregion
		
		public cargo()
		{
			this._cargoEmpleado = new EntitySet<cargoEmpleado>(new Action<cargoEmpleado>(this.attach_cargoEmpleado), new Action<cargoEmpleado>(this.detach_cargoEmpleado));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[NombreCargo ]", Storage="_NombreCargo_", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NombreCargo_
		{
			get
			{
				return this._NombreCargo_;
			}
			set
			{
				if ((this._NombreCargo_ != value))
				{
					this.OnNombreCargo_Changing(value);
					this.SendPropertyChanging();
					this._NombreCargo_ = value;
					this.SendPropertyChanged("NombreCargo_");
					this.OnNombreCargo_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cargo_cargoEmpleado", Storage="_cargoEmpleado", ThisKey="Id", OtherKey="CargoID")]
		public EntitySet<cargoEmpleado> cargoEmpleado
		{
			get
			{
				return this._cargoEmpleado;
			}
			set
			{
				this._cargoEmpleado.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_cargoEmpleado(cargoEmpleado entity)
		{
			this.SendPropertyChanging();
			entity.cargo = this;
		}
		
		private void detach_cargoEmpleado(cargoEmpleado entity)
		{
			this.SendPropertyChanging();
			entity.cargo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cargoEmpleado")]
	public partial class cargoEmpleado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EmpleadoId;
		
		private int _CargoID;
		
		private EntityRef<cargo> _cargo;
		
		private EntityRef<empleado> _empleado;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmpleadoIdChanging(int value);
    partial void OnEmpleadoIdChanged();
    partial void OnCargoIDChanging(int value);
    partial void OnCargoIDChanged();
    #endregion
		
		public cargoEmpleado()
		{
			this._cargo = default(EntityRef<cargo>);
			this._empleado = default(EntityRef<empleado>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpleadoId", DbType="Int NOT NULL")]
		public int EmpleadoId
		{
			get
			{
				return this._EmpleadoId;
			}
			set
			{
				if ((this._EmpleadoId != value))
				{
					if (this._empleado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpleadoIdChanging(value);
					this.SendPropertyChanging();
					this._EmpleadoId = value;
					this.SendPropertyChanged("EmpleadoId");
					this.OnEmpleadoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CargoID", DbType="Int NOT NULL")]
		public int CargoID
		{
			get
			{
				return this._CargoID;
			}
			set
			{
				if ((this._CargoID != value))
				{
					if (this._cargo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCargoIDChanging(value);
					this.SendPropertyChanging();
					this._CargoID = value;
					this.SendPropertyChanged("CargoID");
					this.OnCargoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cargo_cargoEmpleado", Storage="_cargo", ThisKey="CargoID", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public cargo cargo
		{
			get
			{
				return this._cargo.Entity;
			}
			set
			{
				cargo previousValue = this._cargo.Entity;
				if (((previousValue != value) 
							|| (this._cargo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cargo.Entity = null;
						previousValue.cargoEmpleado.Remove(this);
					}
					this._cargo.Entity = value;
					if ((value != null))
					{
						value.cargoEmpleado.Add(this);
						this._CargoID = value.Id;
					}
					else
					{
						this._CargoID = default(int);
					}
					this.SendPropertyChanged("cargo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="empleado_cargoEmpleado", Storage="_empleado", ThisKey="EmpleadoId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public empleado empleado
		{
			get
			{
				return this._empleado.Entity;
			}
			set
			{
				empleado previousValue = this._empleado.Entity;
				if (((previousValue != value) 
							|| (this._empleado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._empleado.Entity = null;
						previousValue.cargoEmpleado.Remove(this);
					}
					this._empleado.Entity = value;
					if ((value != null))
					{
						value.cargoEmpleado.Add(this);
						this._EmpleadoId = value.Id;
					}
					else
					{
						this._EmpleadoId = default(int);
					}
					this.SendPropertyChanged("empleado");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
